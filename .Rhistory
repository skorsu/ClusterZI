?sample
### Data Simulation
set.seed(1)
N <- 500
K <- 3
ci <- sample(1:K, N, replace = TRUE) ### Cluster Assignment
table(ci)
### Data Simulation
set.seed(1)
N <- 500
K <- 3
ci <- sample(1:K, N, replace = TRUE) ### Cluster Assignment
table(ci)
### Data Simulation
set.seed(1)
N <- 10
K <- 3
ci <- sample(1:K, N, replace = TRUE) ### Cluster Assignment
table(ci)
### gamma for each observation based on its cluster
rbernoulli
### gamma for each observation based on its cluster
rbinom(5, 1, 0.5)
N <- 10
J <- 5
K <- 3
### gamma for each observation based on its cluster
rbinom(J, 1, pi_g[ci[1]])
### Data Simulation
set.seed(1)
N <- 10
J <- 5
K <- 3
pi_g <- c(0.5, 0.3, 0.1)
pi_w <- 0.75
ci <- sample(1:K, N, replace = TRUE) ### Cluster Assignment
### gamma for each observation based on its cluster
rbinom(J, 1, pi_g[ci[1]])
pi_g[ci]
rbinom(J, 1, pi_g[ci])
pi_g[ci]
matrix(pi_g[ci])
?rbinom
apply(matrix(pi_g[ci]), 1, rbinom, n = J, size = 1)
t(apply(matrix(pi_g[ci]), 1, rbinom, n = J, size = 1))
set.seed(1)
N <- 10
J <- 100
K <- 3
pi_g <- c(0.5, 0.3, 0.1)
pi_w <- 0.75
ci <- sample(1:K, N, replace = TRUE) ### Cluster Assignment
t(apply(matrix(pi_g[ci]), 1, rbinom, n = J, size = 1))
set.seed(1)
N <- 10
J <- 100
K <- 3
pi_g <- c(0.5, 0.3, 0.1)
pi_w <- 0.75
### Cluster Assignment
ci <- sample(1:K, N, replace = TRUE)
### gamma for each observation based on its cluster
gm_mat <- t(apply(matrix(pi_g[ci]), 1, rbinom, n = J, size = 1))
gm_mat
apply(gm_mat, 1, sum)
ci
### w (important variable)
w <- rbinom(J, 1, pi_w)
w
w %*% gm_mat
gm_mat %*% w
rep(w, 100)
gm_mat %*% matrix(rep(w, 100))
matrix(rep(w, 100))
matrix(rep(w, 100), nrow = 100)
gm_mat %*% t(matrix(rep(w, 100), nrow = 100))
t(matrix(rep(w, 100), nrow = 100))
gm_mat
gm_mat * t(matrix(rep(w, 100), nrow = 100))
gm_mat
gm_mat * w
gm_mat[1, ]
w
gm_mat[1, ] * w
(gm_mat * w)[1, ]
t(gm_mat * w)[1, ]
(gm_mat * w)[1, ]
sweep(gm_mat, MARGIN=2, w, `*`)
sweep(gm_mat, MARGIN=2, w, `*`)[1, ]
gm_mat[1, ] * w
sweep(gm_mat, MARGIN=2, w, `*`)[1, ] == gm_mat[1, ] * w
sweep(gm_mat, MARGIN=2, w, `*`)[10, ] == gm_mat[10, ] * w
for(i in 1:N){
sum(sweep(gm_mat, MARGIN=2, w, `*`)[i, ] == (gm_mat[i, ] * w))
}
for(i in 1:N){
sum(sweep(gm_mat, MARGIN=2, w, `*`)[i, ] == (gm_mat[i, ] * w)) %>% print()
}
library(tidyverse)
for(i in 1:N){
sum(sweep(gm_mat, MARGIN=2, w, `*`)[i, ] == (gm_mat[i, ] * w)) %>% print()
}
s2 <- 1
rnorm(J * K, 0, s2)
### Generate beta and xi
exp(rnorm(J * K, 0, s2))
### Generate beta and xi
hist(exp(rnorm(J * K, 0, s2)))
hist(exp(rnorm(J * K, 0, s2)))
hist(exp(rnorm(J * K, 0, s2)))
hist(exp(rnorm(J * K, 0, s2)))
hist(exp(rnorm(J * K, 0, s2)))
hist(exp(rnorm(J * K, 0, s2)))
hist(exp(rnorm(J * K, 0, s2)))
s2 <- 10
hist(exp(rnorm(J * K, 0, s2)))
hist(exp(rnorm(J * K, 0, s2)))
s2 <- 0.1
### Generate beta and xi
hist(exp(rnorm(J * K, 0, s2)))
### Generate beta and xi
hist(exp(rnorm(J * K, 0, sqrt(s2))))
for(i in 1:N){
sum(sweep(gm_mat, MARGIN=2, w, `*`)[i, ] == (gm_mat[i, ] * w)) %>% print()
}
s2 <- 1
### Generate xi = exp(beta) where beta ~ N(0, s2).
xi <- exp(rnorm(J * K, 0, sqrt(s2)))
xi
library(tidyverse)
### Data Simulation
set.seed(1)
N <- 10
J <- 100
K <- 3
pi_g <- c(0.5, 0.3, 0.1)
pi_w <- 0.75
s2 <- 1
### cluster assignment
ci <- sample(1:K, N, replace = TRUE)
### gamma for each observation based on its cluster (at-risk indicator)
gm_mat <- t(apply(matrix(pi_g[ci]), 1, rbinom, n = J, size = 1))
### w (important variable)
w <- rbinom(J, 1, pi_w)
### Generate xi = exp(beta) where beta ~ N(0, s2).
xi <- exp(rnorm(J * K, 0, sqrt(s2)))
xi
library(tidyverse)
### Data Simulation
set.seed(1)
N <- 10
J <- 100
K <- 3
pi_g <- c(0.5, 0.3, 0.1)
pi_w <- 0.75
s2 <- 1
### cluster assignment
ci <- sample(1:K, N, replace = TRUE)
### gamma for each observation based on its cluster (at-risk indicator)
gm_mat <- t(apply(matrix(pi_g[ci]), 1, rbinom, n = J, size = 1))
### w (important variable)
w <- rbinom(J, 1, pi_w)
### Generate xi = exp(beta) where beta ~ N(0, s2).
xi <- matrix(exp(rnorm(J * K, 0, sqrt(s2))), ncol = J)
xi
###
gm_w <- sweep(gm_mat, MARGIN = 2, w, `*`)
gm_w
matrix(1:15, ncol = 3)
rgamma(15, matrix(1:15, ncol = 3), 1)
rgamma(3, matrix(1:15, ncol = 3), 1)
rgamma(3, matrix(1:15 * 10, ncol = 3), 1)
rgamma(15, matrix(1:15 * 10, ncol = 3), 1)
xi
xi[c(1,1), ]
xi[ci, ]
w
sweep(xi[ci, ], MARGIN = 2, w, `*`)
w
gm_w <- sweep(gm_mat, MARGIN = 2, w, `*`)
w_xi <- sweep(xi[ci, ], MARGIN = 2, w, `*`)
w_xi
gm_w
gm_w * w_xi
ifelse(gm_w * w_xi == 0, TRUE, FALSE)
ifelse(gm_w * w_xi == 0, 0, rgamma(1, gm_w * w_xi, 1))
gm_w * w_xi
rgamma(1, 0, 0)
rgamma(1, 0, 0)
rgamma(1, 0, 0)
rgamma(1, 0, 0)
rgamma(1, 0, 0)
rgamma(1, 0, 0)
?rgamma
gm_w
mapply(rgamma, gm_w, n = 1)
apply(gm_w * w_xi, 1, rgamma, n = 1)
gm_w * w_xi
apply(gm_w * w_xi, 1, rgamma, n = 1)
apply(gm_w * w_xi, 2, rgamma, n = 1)
gm_w * w_xi
spply(gm_w * w_xi, rgamma, n = 1)
sapply(gm_w * w_xi, rgamma, n = 1)
gm_w * w_xi
rgamma(1, gm_w * w_xi, 1)
rgamma(N * J, gm_w * w_xi, 1)
matrix(rgamma(N * J, gm_w * w_xi, 1), ncol = J)
library(tidyverse)
### Data Simulation
set.seed(1)
N <- 10
J <- 100
K <- 3
pi_g <- c(0.5, 0.3, 0.1)
pi_w <- 0.75
s2 <- 1
### cluster assignment
ci <- sample(1:K, N, replace = TRUE)
### gamma for each observation based on its cluster (at-risk indicator)
gm_mat <- t(apply(matrix(pi_g[ci]), 1, rbinom, n = J, size = 1))
### w (important variable)
w <- rbinom(J, 1, pi_w)
### Generate xi = exp(beta) where beta ~ N(0, s2).
xi <- matrix(exp(rnorm(J * K, 0, sqrt(s2))), ncol = J)
###
gm_w <- sweep(gm_mat, MARGIN = 2, w, `*`)
w_xi <- sweep(xi[ci, ], MARGIN = 2, w, `*`)
alpha_mat <- matrix(rgamma(N * J, gm_w * w_xi, 1), ncol = J)
gm_w * w_xi
alpha_mat
(gm_w * w_xi)[, 1:10]
alpha_mat[, 1:10]
(gm_w * w_xi)[, 1:10]
alpha_mat[, 1:10]
alpha_mat
### normalize the alpha matrix
apply(alpha_mat, 1, function(x){x/sum(x)})
### normalize the alpha matrix
t(apply(alpha_mat, 1, function(x){x/sum(x)}))
### normalize the alpha matrix
t(apply(alpha_mat, 1, function(x){x/sum(x)})) %>% sum
t(apply(alpha_mat, 1, function(x){x/sum(x)}))
### normalize the alpha matrix
alpha_norm <- t(apply(alpha_mat, 1, function(x){x/sum(x)}))
alpha_norm
round(runif(1, 500, 1000))
rmultinom(1, round(runif(1, 500, 1000)), alpha_norm)
rmultinom(1, round(runif(1, 500, 1000)), alpha_norm[1, ])
Rcpp::sourceCpp("src/clusterZI.cpp")
### Data Simulation
data_sim <- function(N, K, J, clus_prop, pi_g, pi_w, s2, lb, ub){
### cluster assignment
ci <- sample(1:K, N, replace = TRUE, prob = clus_prop)
### gamma for each observation based on its cluster (at-risk indicator)
gm_mat <- t(apply(matrix(pi_g[ci]), 1, rbinom, n = J, size = 1))
### w (important variable)
w <- rbinom(J, 1, pi_w)
### Generate xi = exp(beta) where beta ~ N(0, s2).
beta <- matrix(rnorm(J * K, 0, sqrt(s2)), ncol = J)
xi <- exp(beta)
### alpha matrix
gm_w <- sweep(gm_mat, MARGIN = 2, w, `*`)
w_xi <- sweep(xi[ci, ], MARGIN = 2, w, `*`)
alpha_mat <- matrix(rgamma(N * J, gm_w * w_xi, 1), ncol = J)
### normalize the alpha matrix
alpha_norm <- t(apply(alpha_mat, 1, function(x){x/sum(x)}))
### simulate zi
sum_zi <- round(runif(N, lb, ub))
zi <- matrix(NA, ncol = J, nrow = N)
for(i in 1:N){
zi[i, ] <- rmultinom(1, sum_zi[i], alpha_norm[i, ])
}
### Return the simulated data
list(ci = ci, gamma = gm_mat, w = w, beta = beta, zi = zi)
}
set.seed(12)
data_sim(10, 2, 20, c(0.3, 0.7), c(0.4, 0.6), 0.5, 1, 50, 100)
set.seed(12)
test_dat <- data_sim(10, 2, 20, c(0.4, 0.6), c(0.4, 0.6), 0.75, 1, 50, 100)
test_dat
test_dat$zi
update_gamma(test_dat$zi, test_dat$w)
update_gamma(test_dat$zi, test_dat$w)
Rcpp::sourceCpp("src/clusterZI.cpp")
update_gamma(test_dat$zi, test_dat$w)
update_gamma(test_dat$zi, test_dat$w, test_dat$gamma)
test_dat$w
set.seed(12)
test_dat <- data_sim(10, 2, 20, c(0.4, 0.6), c(0.4, 0.6), 0.5, 1, 50, 100)
update_gamma(test_dat$zi, test_dat$w, test_dat$gamma)
Rcpp::sourceCpp("src/clusterZI.cpp")
update_gamma(test_dat$zi, test_dat$w, test_dat$gamma)
Rcpp::sourceCpp("src/clusterZI.cpp")
update_gamma(test_dat$zi, test_dat$w, test_dat$gamma)
Rcpp::sourceCpp("src/clusterZI.cpp")
update_gamma(test_dat$zi, test_dat$w, test_dat$gamma)
Rcpp::sourceCpp("src/clusterZI.cpp")
update_gamma(test_dat$zi, test_dat$w, test_dat$gamma)
update_gamma(test_dat$zi, test_dat$w, test_dat$gamma)
Rcpp::sourceCpp("src/clusterZI.cpp")
test_dat$w
test_dat$zi[1, ]
test_dat$gamma[1, ]
test_dat$beta
test_dat$ci
log_g_ijk(0, test_dat$zi[1, ], test_dat$gamma[1, ], test_dat$w,
test_dat$beta[, 2], double b0g, double b1g)
log_g_ijk(0, test_dat$zi[1, ], test_dat$gamma[1, ], test_dat$w,
test_dat$beta[, 2], 1, 1)
test_dat$gamma[1, ]
beta(2, 1)
beta(1, 1)
beta(2, 1)/beta(1, 1)
beta(2, 1)/beta(1, 1) %>% log()
library(tidyverse)
beta(2, 1)/beta(1, 1) %>% log()
beta(2, 1)/beta(1, 1)
(beta(2, 1)/beta(1, 1)) %>% log()
test_dat$gamma[1, ]
log_g_ijk(0, test_dat$zi[1, ], 0, test_dat$w,
test_dat$beta[, 2], 1, 1)
(beta(1, 2)/beta(1, 1)) %>% log()
log_g_ijk(0, test_dat$zi[1, ], 0, test_dat$w,
test_dat$beta[, 2], 1, 3)
log_g_ijk(0, test_dat$zi[1, ], test_dat$gamma[1, ], test_dat$w,
test_dat$beta[, 2], 1, 3)
(beta(2, 3)/beta(1, 3)) %>% log()
log_g_ijk(0, test_dat$zi[1, ], test_dat$gamma[1, ], test_dat$w,
test_dat$beta[, 2], 3, 1)
(beta(1, 4)/beta(1, 3)) %>% log()
Rcpp::sourceCpp("src/clusterZI.cpp")
log_g_ijk(0, test_dat$zi[1, ], test_dat$gamma[1, ], test_dat$w, test_dat$beta[, 2], 1, 1)
Rcpp::sourceCpp("src/clusterZI.cpp")
log_g_ijk(0, test_dat$zi[1, ], test_dat$gamma[1, ], test_dat$w, test_dat$beta[, 2], 1, 1)
test_dat$zi[1, ]
test_dat$gamma[1, ]
test_dat$beta[, 2]
log_g_ijk(0, test_dat$zi[1, ], test_dat$gamma[1, ], test_dat$w, test_dat$beta[2, ], 1, 1)
Rcpp::sourceCpp("src/clusterZI.cpp")
log_g_ijk(0, test_dat$zi[1, ], test_dat$gamma[1, ], test_dat$w, test_dat$beta[2, ], 1, 1)
Rcpp::sourceCpp("src/clusterZI.cpp")
Rcpp::sourceCpp("src/clusterZI.cpp")
log_g_ijk(0, test_dat$zi[1, ], test_dat$gamma[1, ], test_dat$w, test_dat$beta[2, ], 1, 1)
Rcpp::sourceCpp("src/clusterZI.cpp")
log_g_ijk(0, test_dat$zi[1, ], test_dat$gamma[1, ], test_dat$w, test_dat$beta[2, ], 1, 1)
Rcpp::sourceCpp("src/clusterZI.cpp")
log_g_ijk(0, test_dat$zi[1, ], test_dat$gamma[1, ], test_dat$w, test_dat$beta[2, ], 1, 1)
Rcpp::sourceCpp("src/clusterZI.cpp")
update_gamma(test_dat$zi, test_dat$w, test_dat$gamma)
log_g_ijk(0, test_dat$zi[1, ], test_dat$gamma[1, ], test_dat$w, test_dat$beta[2, ], 1, 1)
Rcpp::sourceCpp("src/clusterZI.cpp")
log_g_ijk(0, test_dat$zi[1, ], test_dat$gamma[1, ], test_dat$w, test_dat$beta[2, ], 1, 1)
Rcpp::sourceCpp("src/clusterZI.cpp")
update_gamma(test_dat$zi, test_dat$w, test_dat$gamma)
Rcpp::sourceCpp("src/clusterZI.cpp")
update_gamma(test_dat$zi, test_dat$w, test_dat$gamma)
Rcpp::sourceCpp("src/clusterZI.cpp")
update_gamma(test_dat$zi, test_dat$w, test_dat$gamma)
Rcpp::sourceCpp("src/clusterZI.cpp")
update_gamma(test_dat$zi, test_dat$w, test_dat$gamma)
test_dat$beta
exp(test_dat$beta)
update_gamma(z = test_dat$zi, clus_assign = test_dat$ci, w = test_dat$w,
old_gamma = test_dat$gamma, xi = exp(test_dat$beta),
b0g = 1, b1g = 1)
Rcpp::sourceCpp("src/clusterZI.cpp")
test_dat$zi[1, ]
### Data Simulation
data_sim <- function(N, K, J, clus_prop, pi_g, pi_w, s2, lb, ub){
### cluster assignment
ci <- sample(1:K, N, replace = TRUE, prob = clus_prop)
### gamma for each observation based on its cluster (at-risk indicator)
gm_mat <- t(apply(matrix(pi_g[ci]), 1, rbinom, n = J, size = 1))
### w (important variable)
w <- rbinom(J, 1, pi_w)
### Generate xi = exp(beta) where beta ~ N(0, s2).
beta <- matrix(rnorm(J * K, 0, sqrt(s2)), ncol = J)
xi <- exp(beta)
### alpha matrix
gm_w <- sweep(gm_mat, MARGIN = 2, w, `*`)
w_xi <- sweep(xi[ci, ], MARGIN = 2, w, `*`)
alpha_mat <- matrix(rgamma(N * J, gm_w * w_xi, 1), ncol = J)
### normalize the alpha matrix
alpha_norm <- t(apply(alpha_mat, 1, function(x){x/sum(x)}))
### simulate zi
sum_zi <- round(runif(N, lb, ub))
zi <- matrix(NA, ncol = J, nrow = N)
for(i in 1:N){
zi[i, ] <- rmultinom(1, sum_zi[i], alpha_norm[i, ])
}
### Return the simulated data
list(ci = ci, gamma = gm_mat, w = w, beta = beta, z = zi)
}
set.seed(12)
test_dat <- data_sim(10, 2, 20, c(0.4, 0.6), c(0.4, 0.6), 0.5, 1, 50, 100)
test_dat$ci
log_g_ijk(j = 0, zi = test_dat$z[1, ], gi = test_dat$gamma[1, ],
w = test_dat$w, xi_k = exp(test_dat$beta[2, ]), b0g = 1, b1g = 1)
gi
test_dat$gamma[1, ]
beta(2, 1)/beta(1, 1)
beta(2, 1)/beta(1, 1)
old_g <- test_dat$z[1, ]
old_g
beta(2, 1)/beta(1, 1)
old_g <- test_dat$gamma[1, ]
old_g
log_g_ijk(j = 0, zi = test_dat$z[1, ], gi = test_dat$gamma[1, ],
w = test_dat$w, xi_k = exp(test_dat$beta[2, ]), b0g = 1, b1g = 1)
beta(2, 1)/beta(1, 1)
old_g <- test_dat$gamma[1, ]
new_g <- old_g
new_g[1] <- 0
log_g_ijk(j = 0, zi = test_dat$z[1, ], gi = test_dat$gamma[1, ],
w = test_dat$w, xi_k = exp(test_dat$beta[2, ]), b0g = 1, b1g = 1)
beta(2, 1)/beta(1, 1)
test_dat$gamma[1, ]
test_dat$gamma[1, ] * w
test_dat$w
test_dat$gamma[1, ] * test_dat$w * exp(test_dat$beta[2, ])
sum(test_dat$gamma[1, ] * test_dat$w * exp(test_dat$beta[2, ]))
lgamma(sum(test_dat$gamma[1, ] * test_dat$w * exp(test_dat$beta[2, ])))
gwx <- test_dat$gamma[1, ] * test_dat$w * exp(test_dat$beta[2, ])
gwx == 0
gwx != 0
gwx[gwx != 0]
sum(lgamma(gwx[gwx != 0]))
zgwx <- test_dat$z[1, ] + gwx
sum(lgamma(zgwx[zgwx != 0]))
lgamma(sum(test_dat$gamma[1, ] * test_dat$w * exp(test_dat$beta[2, ])))
lgamma(sum(gqx))
lgamma(sum(gwx))
sum(lgamma(zgwx[zgwx != 0]))
lgamma(sum(zgwx))
lbeta(2, 1)
lbeta(2, 1) - beta(1, 1) + lgamma(sum(gwx)) - sum(lgamma(gwx[gwx != 0])) + sum(lgamma(zgwx[zgwx != 0])) - lgamma(sum(zgwx))
log_g_ijk(j = 0, zi = test_dat$z[1, ], gi = test_dat$gamma[1, ],
w = test_dat$w, xi_k = exp(test_dat$beta[2, ]), b0g = 1, b1g = 1)
Rcpp::sourceCpp("src/clusterZI.cpp")
log_g_ijk(j = 0, zi = test_dat$z[1, ], gi = test_dat$gamma[1, ],
w = test_dat$w, xi_k = exp(test_dat$beta[2, ]), b0g = 1, b1g = 1)
lbeta(2, 1) - beta(1, 1)
lbeta(2, 1) - lbeta(1, 1) + lgamma(sum(gwx)) - sum(lgamma(gwx[gwx != 0])) + sum(lgamma(zgwx[zgwx != 0])) - lgamma(sum(zgwx))
Rcpp::sourceCpp("src/clusterZI.cpp")
Rcpp::sourceCpp("src/clusterZI.cpp")
update_gamma(z = test_dat$zi, clus_assign = test_dat$ci, w = test_dat$w,
old_gamma = test_dat$gamma, xi = exp(test_dat$beta),
b0g = 1, b1g = 1)
Rcpp::sourceCpp("src/clusterZI.cpp")
update_gamma(z = test_dat$z, clus_assign = test_dat$ci, w = test_dat$w,
old_gamma = test_dat$gamma, xi = exp(test_dat$beta),
b0g = 1, b1g = 1)
Rcpp::sourceCpp("src/clusterZI.cpp")
update_gamma(z = test_dat$z, clus_assign = test_dat$ci, w = test_dat$w,
old_gamma = test_dat$gamma, xi = exp(test_dat$beta),
b0g = 1, b1g = 1)
set.seed(12)
test_dat <- data_sim(10, 2, 20, c(0.4, 0.6), c(0.4, 0.6), 0.5, 1, 50, 100)
new_gamma <- update_gamma(z = test_dat$z, clus_assign = test_dat$ci, w = test_dat$w,
old_gamma = test_dat$gamma, xi = exp(test_dat$beta),
b0g = 1, b1g = 1)
test_dat$gamma == new_gamma
test_dat$z
test_dat$z[1, ]
test_dat$z[1, ]
test_dat$gamma[1, ]
new_gamma[1, ]
cbind(test_dat$z[1, ], test_dat$gamma[1, ], new_gamma[1, ])
cbind(test_dat$z[5, ], test_dat$gamma[5, ], new_gamma[5, ])
