?sample
### Data Simulation
set.seed(1)
N <- 500
K <- 3
ci <- sample(1:K, N, replace = TRUE) ### Cluster Assignment
table(ci)
### Data Simulation
set.seed(1)
N <- 500
K <- 3
ci <- sample(1:K, N, replace = TRUE) ### Cluster Assignment
table(ci)
### Data Simulation
set.seed(1)
N <- 10
K <- 3
ci <- sample(1:K, N, replace = TRUE) ### Cluster Assignment
table(ci)
### gamma for each observation based on its cluster
rbernoulli
### gamma for each observation based on its cluster
rbinom(5, 1, 0.5)
N <- 10
J <- 5
K <- 3
### gamma for each observation based on its cluster
rbinom(J, 1, pi_g[ci[1]])
### Data Simulation
set.seed(1)
N <- 10
J <- 5
K <- 3
pi_g <- c(0.5, 0.3, 0.1)
pi_w <- 0.75
ci <- sample(1:K, N, replace = TRUE) ### Cluster Assignment
### gamma for each observation based on its cluster
rbinom(J, 1, pi_g[ci[1]])
pi_g[ci]
rbinom(J, 1, pi_g[ci])
pi_g[ci]
matrix(pi_g[ci])
?rbinom
apply(matrix(pi_g[ci]), 1, rbinom, n = J, size = 1)
t(apply(matrix(pi_g[ci]), 1, rbinom, n = J, size = 1))
set.seed(1)
N <- 10
J <- 100
K <- 3
pi_g <- c(0.5, 0.3, 0.1)
pi_w <- 0.75
ci <- sample(1:K, N, replace = TRUE) ### Cluster Assignment
t(apply(matrix(pi_g[ci]), 1, rbinom, n = J, size = 1))
set.seed(1)
N <- 10
J <- 100
K <- 3
pi_g <- c(0.5, 0.3, 0.1)
pi_w <- 0.75
### Cluster Assignment
ci <- sample(1:K, N, replace = TRUE)
### gamma for each observation based on its cluster
gm_mat <- t(apply(matrix(pi_g[ci]), 1, rbinom, n = J, size = 1))
gm_mat
apply(gm_mat, 1, sum)
ci
### w (important variable)
w <- rbinom(J, 1, pi_w)
w
w %*% gm_mat
gm_mat %*% w
rep(w, 100)
gm_mat %*% matrix(rep(w, 100))
matrix(rep(w, 100))
matrix(rep(w, 100), nrow = 100)
gm_mat %*% t(matrix(rep(w, 100), nrow = 100))
t(matrix(rep(w, 100), nrow = 100))
gm_mat
gm_mat * t(matrix(rep(w, 100), nrow = 100))
gm_mat
gm_mat * w
gm_mat[1, ]
w
gm_mat[1, ] * w
(gm_mat * w)[1, ]
t(gm_mat * w)[1, ]
(gm_mat * w)[1, ]
sweep(gm_mat, MARGIN=2, w, `*`)
sweep(gm_mat, MARGIN=2, w, `*`)[1, ]
gm_mat[1, ] * w
sweep(gm_mat, MARGIN=2, w, `*`)[1, ] == gm_mat[1, ] * w
sweep(gm_mat, MARGIN=2, w, `*`)[10, ] == gm_mat[10, ] * w
for(i in 1:N){
sum(sweep(gm_mat, MARGIN=2, w, `*`)[i, ] == (gm_mat[i, ] * w))
}
for(i in 1:N){
sum(sweep(gm_mat, MARGIN=2, w, `*`)[i, ] == (gm_mat[i, ] * w)) %>% print()
}
library(tidyverse)
for(i in 1:N){
sum(sweep(gm_mat, MARGIN=2, w, `*`)[i, ] == (gm_mat[i, ] * w)) %>% print()
}
s2 <- 1
rnorm(J * K, 0, s2)
### Generate beta and xi
exp(rnorm(J * K, 0, s2))
### Generate beta and xi
hist(exp(rnorm(J * K, 0, s2)))
hist(exp(rnorm(J * K, 0, s2)))
hist(exp(rnorm(J * K, 0, s2)))
hist(exp(rnorm(J * K, 0, s2)))
hist(exp(rnorm(J * K, 0, s2)))
hist(exp(rnorm(J * K, 0, s2)))
hist(exp(rnorm(J * K, 0, s2)))
s2 <- 10
hist(exp(rnorm(J * K, 0, s2)))
hist(exp(rnorm(J * K, 0, s2)))
s2 <- 0.1
### Generate beta and xi
hist(exp(rnorm(J * K, 0, s2)))
### Generate beta and xi
hist(exp(rnorm(J * K, 0, sqrt(s2))))
for(i in 1:N){
sum(sweep(gm_mat, MARGIN=2, w, `*`)[i, ] == (gm_mat[i, ] * w)) %>% print()
}
s2 <- 1
### Generate xi = exp(beta) where beta ~ N(0, s2).
xi <- exp(rnorm(J * K, 0, sqrt(s2)))
xi
library(tidyverse)
### Data Simulation
set.seed(1)
N <- 10
J <- 100
K <- 3
pi_g <- c(0.5, 0.3, 0.1)
pi_w <- 0.75
s2 <- 1
### cluster assignment
ci <- sample(1:K, N, replace = TRUE)
### gamma for each observation based on its cluster (at-risk indicator)
gm_mat <- t(apply(matrix(pi_g[ci]), 1, rbinom, n = J, size = 1))
### w (important variable)
w <- rbinom(J, 1, pi_w)
### Generate xi = exp(beta) where beta ~ N(0, s2).
xi <- exp(rnorm(J * K, 0, sqrt(s2)))
xi
library(tidyverse)
### Data Simulation
set.seed(1)
N <- 10
J <- 100
K <- 3
pi_g <- c(0.5, 0.3, 0.1)
pi_w <- 0.75
s2 <- 1
### cluster assignment
ci <- sample(1:K, N, replace = TRUE)
### gamma for each observation based on its cluster (at-risk indicator)
gm_mat <- t(apply(matrix(pi_g[ci]), 1, rbinom, n = J, size = 1))
### w (important variable)
w <- rbinom(J, 1, pi_w)
### Generate xi = exp(beta) where beta ~ N(0, s2).
xi <- matrix(exp(rnorm(J * K, 0, sqrt(s2))), ncol = J)
xi
###
gm_w <- sweep(gm_mat, MARGIN = 2, w, `*`)
gm_w
matrix(1:15, ncol = 3)
rgamma(15, matrix(1:15, ncol = 3), 1)
rgamma(3, matrix(1:15, ncol = 3), 1)
rgamma(3, matrix(1:15 * 10, ncol = 3), 1)
rgamma(15, matrix(1:15 * 10, ncol = 3), 1)
xi
xi[c(1,1), ]
xi[ci, ]
w
sweep(xi[ci, ], MARGIN = 2, w, `*`)
w
gm_w <- sweep(gm_mat, MARGIN = 2, w, `*`)
w_xi <- sweep(xi[ci, ], MARGIN = 2, w, `*`)
w_xi
gm_w
gm_w * w_xi
ifelse(gm_w * w_xi == 0, TRUE, FALSE)
ifelse(gm_w * w_xi == 0, 0, rgamma(1, gm_w * w_xi, 1))
gm_w * w_xi
rgamma(1, 0, 0)
rgamma(1, 0, 0)
rgamma(1, 0, 0)
rgamma(1, 0, 0)
rgamma(1, 0, 0)
rgamma(1, 0, 0)
?rgamma
gm_w
mapply(rgamma, gm_w, n = 1)
apply(gm_w * w_xi, 1, rgamma, n = 1)
gm_w * w_xi
apply(gm_w * w_xi, 1, rgamma, n = 1)
apply(gm_w * w_xi, 2, rgamma, n = 1)
gm_w * w_xi
spply(gm_w * w_xi, rgamma, n = 1)
sapply(gm_w * w_xi, rgamma, n = 1)
gm_w * w_xi
rgamma(1, gm_w * w_xi, 1)
rgamma(N * J, gm_w * w_xi, 1)
matrix(rgamma(N * J, gm_w * w_xi, 1), ncol = J)
library(tidyverse)
### Data Simulation
set.seed(1)
N <- 10
J <- 100
K <- 3
pi_g <- c(0.5, 0.3, 0.1)
pi_w <- 0.75
s2 <- 1
### cluster assignment
ci <- sample(1:K, N, replace = TRUE)
### gamma for each observation based on its cluster (at-risk indicator)
gm_mat <- t(apply(matrix(pi_g[ci]), 1, rbinom, n = J, size = 1))
### w (important variable)
w <- rbinom(J, 1, pi_w)
### Generate xi = exp(beta) where beta ~ N(0, s2).
xi <- matrix(exp(rnorm(J * K, 0, sqrt(s2))), ncol = J)
###
gm_w <- sweep(gm_mat, MARGIN = 2, w, `*`)
w_xi <- sweep(xi[ci, ], MARGIN = 2, w, `*`)
alpha_mat <- matrix(rgamma(N * J, gm_w * w_xi, 1), ncol = J)
gm_w * w_xi
alpha_mat
(gm_w * w_xi)[, 1:10]
alpha_mat[, 1:10]
(gm_w * w_xi)[, 1:10]
alpha_mat[, 1:10]
alpha_mat
### normalize the alpha matrix
apply(alpha_mat, 1, function(x){x/sum(x)})
### normalize the alpha matrix
t(apply(alpha_mat, 1, function(x){x/sum(x)}))
### normalize the alpha matrix
t(apply(alpha_mat, 1, function(x){x/sum(x)})) %>% sum
t(apply(alpha_mat, 1, function(x){x/sum(x)}))
### normalize the alpha matrix
alpha_norm <- t(apply(alpha_mat, 1, function(x){x/sum(x)}))
alpha_norm
round(runif(1, 500, 1000))
rmultinom(1, round(runif(1, 500, 1000)), alpha_norm)
rmultinom(1, round(runif(1, 500, 1000)), alpha_norm[1, ])
